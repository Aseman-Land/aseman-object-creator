/*
    Copyright (C) 2014 Aseman
    http://aseman.co

    This project is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This project is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#define BODY_RX "(?:\\s|^)\\s+([a-zA-Z].*(?:\\*)?)\\s+([a-zA-Z]\\w*)\\s+(rw|ro)(?:\\s+\\=\\s+(.*))?\\;"
#define BODY_BEGIN( MACRO ) \
    QString res = #MACRO; \
    QRegExp rx(BODY_RX); \
    rx.setMinimal(true); \
    int pos = 0; \
    while( (pos = rx.indexIn(data, pos)) != -1 ) { \
        const QString & type = rx.cap(1); \
        const QString & name = rx.cap(2); \
        const QString & cnme = name[0].toUpper() + name.mid(1); \
        const QString & mode = rx.cap(3); \
        const QString & dflt = rx.cap(4); \
        const QString & pflg = type.right(1)=="*"? "*" : ""; \
        QString body;

#define BODY_END( MACRO ) \
        body.replace("%default",dflt); \
        body.replace("%class",clssName); \
        body.replace("%type", type); \
        body.replace("%name", name); \
        body.replace("%cname", cnme); \
        body.replace("%pointerflag", pflg); \
        res.replace(#MACRO, body); \
        pos += rx.matchedLength(); \
    } \
    res.replace(#MACRO, QString()); \
    for( int i=res.size()-1; i>0; i-- ) \
        if( res[i] == '\n' ) \
            res.remove(i,1); \
        else \
            break; \
    res += "\n"; \
    return res;

#include "objectcreator.h"

#include <QRegExp>
#include <QStringList>
#include <QFile>
#include <QDebug>
#include <QCoreApplication>

ObjectCreator::ObjectCreator()
{
    setFileTemplate(":/templates/file.template");
    setClassTemplate(":/templates/class.template");
    setInitlalizeTemplate(":/templates/initialize.template");
    setBodyReadTemplate(":/templates/body_read.template");
    setBodyWriteTemplate(":/templates/body_write.template");
    setBodyNotifyTemplate(":/templates/body_notify.template");
    setPropertyReadTemplate(":/templates/property_r.template");
    setPropertyWriteTemplate(":/templates/property_rw.template");
    setVariablesTemplate(":/templates/variables.template");
    setDefaultsTemplate(":/templates/presets.template");
    setEqualsTemplate(":/templates/equals.template");
}

QString ObjectCreator::createObject(const QString &data)
{
    QString res;
    if( data.isEmpty() )
        return res;
    if( data[0] != '#' )
        return res;

    int firstNewLine = data.indexOf("\n");
    const QString & componentName = data.mid(1,firstNewLine-2);

    const QString & includes = extractIncludes(data);
    const QString & classes = extractClasses(data);
    const QString & intializes = extractInitializes(data);

    res += "// This file is generated by Aseman Object Creator\n";
    res += "// https://github.com/aseman-labs/aseman-object-creator\n";
    res += "// Command: " + QCoreApplication::arguments().join(" ") + "\n\n";
    res += "#ifndef " + componentName.toUpper() + "_H\n";
    res += "#define " + componentName.toUpper() + "_H\n\n";
    res += file_template + "\n";
    res += "#endif\n";

    res.replace("%includes", includes);
    res.replace("%classes", classes);
    res.replace("%intializes", intializes);

    return res;
}

QString ObjectCreator::extractIncludes(const QString &data)
{
    QString res;
    QRegExp rx("(?:\\s|^)include\\s+(.+)\\;");
    rx.setMinimal(true);

    int pos = 0;
    while( (pos = rx.indexIn(data, pos)) != -1 )
    {
        const QString & path = rx.cap(1);
        res += "#include " + path + "\n";
        pos += rx.matchedLength();
    }

    return res;
}

QString ObjectCreator::extractClasses(const QString &data)
{
    QString res = "%next";
    QRegExp rx("(?:\\s|^)object\\s+([a-zA-Z]\\w*)\\s+\\{(.*)\\}");
    rx.setMinimal(true);

    int pos = 0;
    while( (pos = rx.indexIn(data, pos)) != -1 )
    {
        const QString & name = rx.cap(1);
        const QString & body = rx.cap(2);

        QString clss = class_template;
        clss.replace("%name", name);
        clss.replace("%body", extractClassBody(name,body) );
        clss.replace("%properties", extractClassProperties(name,body) );
        clss.replace("%notifies", extractClassSignals(name,body) );
        clss.replace("%variables", extractClassVariables(name,body) );
        clss.replace("%presets", extractClassDefaults(name,body) );
        clss.replace("%equals", extractClassEquals(name,body) );

        res.replace("%next", clss);
        pos += rx.matchedLength();
    }

    res.replace("%next", QString());
    return res;
}

QString ObjectCreator::extractInitializes(const QString &data)
{
    QString res = "%intializes";
    QRegExp rx("(?:\\s|^)object\\s+([a-zA-Z]\\w*)\\s+\\{(.*)\\}");
    rx.setMinimal(true);

    int pos = 0;
    while( (pos = rx.indexIn(data, pos)) != -1 )
    {
        const QString & name = rx.cap(1);

        QString clss = initialize_template;
        clss.replace("%name", name);

        res.replace("%intializes", clss);
        pos += rx.matchedLength();
    }

    res.replace("%intializes", QString());
    return res;
}

QString ObjectCreator::extractClassBody(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%body);
    body = body_read_template;
    body.replace("%next_write", mode=="rw"? body_write_template : QString() );
    BODY_END(%body);
}

QString ObjectCreator::extractClassProperties(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%properties);
    body = mode=="rw"? property_write_template : property_read_template;
    BODY_END(%properties);
}

QString ObjectCreator::extractClassSignals(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%notifies);
    body = body_notify_template;
    Q_UNUSED(mode)
    BODY_END(%notifies);
}

QString ObjectCreator::extractClassVariables(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%variables);
    body = variables_template;
    Q_UNUSED(mode)
    BODY_END(%variables);
}

QString ObjectCreator::extractClassDefaults(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%presets);
    body = dflt.isEmpty()? "%presets" : defaults_template;
    Q_UNUSED(mode)
    BODY_END(%presets);
}

QString ObjectCreator::extractClassEquals(const QString &clssName, const QString &data)
{
    BODY_BEGIN(%equals);
    body = equals_template;
    Q_UNUSED(mode)
    BODY_END(%equals);
}

void ObjectCreator::setFileTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    file_template = file.readAll();
}

void ObjectCreator::setClassTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    class_template = file.readAll();
}

void ObjectCreator::setInitlalizeTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    initialize_template = file.readAll();
}

void ObjectCreator::setBodyReadTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    body_read_template = file.readAll();
}

void ObjectCreator::setBodyWriteTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    body_write_template = file.readAll();
}

void ObjectCreator::setBodyNotifyTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    body_notify_template = file.readAll();
}

void ObjectCreator::setPropertyReadTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    property_read_template = file.readAll();
}

void ObjectCreator::setPropertyWriteTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    property_write_template = file.readAll();
}

void ObjectCreator::setVariablesTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    variables_template = file.readAll();
}

void ObjectCreator::setDefaultsTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    defaults_template = file.readAll();
}

void ObjectCreator::setEqualsTemplate(const QString &path)
{
    QFile file(path);
    if( !file.open(QFile::ReadOnly) )
        return;

    equals_template = file.readAll();
}
